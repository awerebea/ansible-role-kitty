---
# Install Kitty terminal emulator

- name: Check Kitty version.
  shell: >
    set -o pipefail && {{ kitty_install_dir }}/bin/kitty --version |
    grep -Eo "[0-9]{1,}(\.[0-9]{1,}){0,}" | head -n1
  args:
    executable: /usr/bin/bash
  changed_when: false
  failed_when: false
  register: kitty_curr_ver

- name: Filter current version stdout.
  set_fact:
    kitty_current_ver: '{{ kitty_curr_ver.stdout |
    regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'
  when: kitty_curr_ver.rc == 0

- name: Filter desired Kitty version.
  set_fact:
    kitty_desired_ver: '{{ kitty_version |
    regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'
  when: kitty_version is defined and kitty_version | lower != 'nightly'

- name: Basic tasks.
  block:
    - name: Create missing directories.
      block:
        - name: Get status of directories.
          stat:
            path: '{{ item }}'
          register: kitty_dirstatus
          with_items:
            - '{{ kitty_download_dir }}'
            - '{{ kitty_install_dir }}'
            - '{{ kitty_bin_dir }}'

        - name: Create directories in a loop.
          include_tasks: create-dir.yaml
          vars:
            dir_path: '{{ item.item }}'
          with_items: '{{ kitty_dirstatus.results }}'
          when: not item.stat.exists

    - name: Update status of directories.
      stat:
        path: '{{ item }}'
      register: kitty_dirstatus
      with_items:
        - '{{ kitty_download_dir }}'
        - '{{ kitty_install_dir }}'
        - '{{ kitty_bin_dir }}'

    - name: Download the official installation script.
      get_url:
        url: https://sw.kovidgoyal.net/kitty/installer.sh
        dest: '{{ kitty_download_dir }}/installer.sh'
        mode: 0755
      become: '{{ not kitty_dirstatus.results[0].stat.writeable }}'

    - name: Download the release tarball.
      get_url:
        url: "https://github.com/kovidgoyal/kitty/releases/download/\
        v{{ kitty_desired_ver }}/kitty-{{ kitty_desired_ver }}-x86_64.txz"
        dest: '{{ kitty_install_dir }}/kitty-{{ kitty_desired_ver }}-x86_64.txz'
        remote_src: true
      when: kitty_desired_ver is defined
      become: '{{ not kitty_dirstatus.results[0].stat.writeable }}'

    - name: Install Kitty using the official installer.
      command: "{{ kitty_download_dir }}/installer.sh
        {{ 'installer=\"' + kitty_install_dir + '/kitty-' + kitty_desired_ver +
        '-x86_64.txz\"' if kitty_desired_ver is defined
        else 'installer=nightly' if kitty_version is defined
        and kitty_version | lower == 'nightly' }}
        dest={{ kitty_install_dir }}
        launch=n"
      become: '{{ not kitty_dirstatus.results[1].stat.writeable }}'

    - name: Make sure the link to the Kitty exists in the binary directory.
      file:
        src: '{{ kitty_install_dir }}/kitty.app/bin/kitty'
        dest: '{{ kitty_bin_dir }}/kitty'
        mode: 0755
        state: link
      become: '{{ not kitty_dirstatus.results[2].stat.writeable }}'

  # Conditions for starting basic tasks: Kitty is not installed at the
  # desired/default kitty_install_dir directory path, or the installed
  # and desired versions do not match, or a force upgrade to the latest version
  # is defined (in which case the desired version should not be determined).
  when: >
    kitty_curr_ver.rc !=0
    or (kitty_desired_ver is defined
    and kitty_current_ver is
    version(kitty_desired_ver, '!=', version_type='strict'))
    or (update_apps is defined
    and ('all' in update_apps or 'kitty' in update_apps))

- name: Ensure the install path is in the system PATH.
  lineinfile:
    dest: '{{ item }}'
    line: '[[ ":$PATH:" != *":{{ kitty_bin_dir }}:"* ]] &&
    export PATH="$PATH:{{ kitty_bin_dir }}"'
    state: present
    backup: false
  with_items: '{{ kitty_env_files_to_modify }}'
  failed_when: false
  when: kitty_env_files_to_modify | length > 0
